prototype(Sitegeist.Turncoat:ThemeRenderer) < prototype(Neos.Fusion:Component) {
    theme = ${q(site).property('theme')}
    fallback = null
    feature = null
    props = Neos.Fusion:DataStructure

    renderer = Neos.Fusion:Case {
        canRenderWithTheme {
            condition = Neos.Fusion:CanRender {
                type = ${props.theme + ':Feature.' + props.feature}
            }
            renderer = Neos.Fusion:Renderer {
                type = ${props.theme + ':Feature.' + props.feature}
                element.@apply.props = ${props.props}
            }
        }

        canRenderWithFallpack {
            condition = Neos.Fusion:CanRender {
                type = ${props.fallback + ':Feature.' + props.feature}
            }
            renderer = Neos.Fusion:Renderer {
                type = ${props.fallback + ':Feature.' + props.feature}
                element.@apply.props = ${props.props}
            }
        }

        error {
            condition = ${node.context.inBackend}
            renderer = afx`
                <div style="border: 2px dotted red; padding:10px; background: lightgrey; margin: 20px 0;">
                    <Neos.Fusion:Fragment @if.has={props.theme && props.feature}>The selected theme "{props.theme}" cannot render feature "{props.feature}"</Neos.Fusion:Fragment>
                    <Neos.Fusion:Fragment @if.noTheme={!props.theme}>No theme given</Neos.Fusion:Fragment>
                    <Neos.Fusion:Fragment @if.noFeature={!props.feature}>No feature was defined</Neos.Fusion:Fragment>
                </div>
            `
        }
    }
}

prototype(Neos.Fusion:GlobalCacheIdentifiers) {
  theme = ${q(site).property('theme')}
}
